//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;

public class LevelManager : MonoBehaviour
{
	
	private static LevelManager instance;
	public static LevelManager Instance { 
		get {
			if(instance == null){
				instance = new LevelManager();
			}
			return instance;
		}
		set {
			instance = value;
		}
	}

	public int CurrentLevel = 0;
	public int CurrentTestLevel = 0;

	public string[,] MakeCurrentLevelArray(){
		TextAsset asset;
		string[,] ObjectMap;
		try{
			asset = Resources.Load("Levels/Level_" + CurrentTestLevel) as TextAsset;
			ObjectMap = CSVReader.SplitCsvGrid(asset.text);
			return ObjectMap;
		} catch (Exception ex) {
			asset = Resources.Load("Levels/Level_0" + CurrentTestLevel) as TextAsset;
			ObjectMap = CSVReader.SplitCsvGrid(asset.text);
			return ObjectMap;
		}
	}

	public string[,] MakeCurrentTestLevelArray(){
		TextAsset asset;
		string[,] ObjectMap;
		try{
			asset = Resources.Load("Levels/TestLevel_" + CurrentTestLevel) as TextAsset;
			ObjectMap = CSVReader.SplitCsvGrid(asset.text);
			return ObjectMap;
		} catch (Exception ex) {
			asset = Resources.Load("Levels/TestLevel_0" + CurrentTestLevel) as TextAsset;
			ObjectMap = CSVReader.SplitCsvGrid(asset.text);
			return ObjectMap;
		}
	}

	public TextAsset MakeCurrentLevelTextAsset(){
		TextAsset asset;
		try{
			asset = Resources.Load("Levels/Level_" + CurrentTestLevel) as TextAsset;
			return asset;
		} catch (Exception ex) {
			asset = Resources.Load("Levels/Level_0" + CurrentTestLevel) as TextAsset;
			return asset;
		}
	}

	public TextAsset MakeCurrentTestLevelTextAsset(){
		TextAsset asset;
		try{
			asset = Resources.Load("Levels/TestLevel_" + CurrentTestLevel) as TextAsset;
			return asset;
		} catch (Exception ex) {
			asset = Resources.Load("Levels/TestLevel_0" + CurrentTestLevel) as TextAsset;
			return asset;
		}
	}

	private LevelManager ()
	{
		
	}
}
